#!/usr/bin/env python

import argparse
import copy
import json
import itertools
import sys
import yaml

def parse_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument('config_filename', help='Configuration file containing bindings and vhost')
    parser.add_argument('--output_filename', '-o',
            default=None, help='Defaults to STDOUT')

    return parser.parse_args()


def main(config_filename, output_filename):
    configuration = yaml.load(open(config_filename))

    binding_dict = configuration['bindings']
    vhost = configuration['vhost']

    # XXX This obviously to be improved.
    skeleton = {"rabbit_version":"3.0.1",
        "parameters":[],
        "policies":[],
        "users":[
            {"name":"guest",
            "password_hash":"GvVZRv7FY1mtJZfvN42rcdkLQ/w=",
            "tags":"administrator"}
        ],
        "vhosts":[{"name":"/"}, {"name":"workflow"}, {"name":"testing"}],

        "permissions":[
            {"user":"guest",
            "vhost":"/",
            "configure":".*",
            "write":".*",
            "read":".*"},

            {"user":"guest",
            "vhost":"workflow",
            "configure":".*",
            "write":".*",
            "read":".*"},

            {"user":"guest",
            "vhost":"testing",
            "configure":".*",
            "write":".*",
            "read":".*"}
        ],
    }


    exchanges = set()
    queues = set()
    bindings = set()
    for exchange_name, queue_bindings in binding_dict.iteritems():
        exchanges.add(exchange_name)
        for queue_name, topics in queue_bindings.iteritems():
            queues.add(queue_name)
            for topic in topics:
                bindings.add( (exchange_name, topic, queue_name) )


    skeleton['exchanges'] = make_exchange_defs(exchanges, vhost)
    skeleton['queues'] = make_queue_defs(queues, vhost)
    skeleton['bindings'] = make_binding_defs(bindings, vhost)

    if output_filename:
        of = open(output_filename, 'w')
    else:
        of = sys.stdout

    json.dump(skeleton, of)


def make_exchange_defs(exchange_names, vhost):
    template = {
            'vhost': vhost,
            'durable': True,
            'auto_delete': False,
            'internal': False,
            'type': 'topic',
            'arguments': {},
    }

    alt_entry = copy.copy(template)
    alt_entry['name'] = 'alt'
    result = [alt_entry]

    template['arguments'] = {'alternate-exchange': 'alt'}

    for ex_name in itertools.chain(exchange_names, ['dead']):
        entry = copy.copy(template)
        entry['name'] = ex_name
        result.append(entry)

    return result


def make_queue_defs(queues, vhost):
    template = {
            'vhost': vhost,
            'durable': True,
            'auto_delete': False,
            'arguments': {},
    }

    missing_routing_key_entry = copy.copy(template)
    missing_routing_key_entry['name'] = 'missing_routing_key'
    result = [missing_routing_key_entry]

    for q_name in queues:
        entry = copy.copy(template)
        entry['name'] = q_name
        entry['arguments'] = {'x-dead-letter-exchange': 'dead'}
        result.append(entry)

        dead_entry = copy.copy(template)
        dead_entry['name'] = 'dead_' + q_name
        result.append(dead_entry)

    return result


def make_binding_defs(bindings, vhost):
    template = {
            'vhost': vhost,
            'destination_type': 'queue',
            'arguments': {},
    }

    mrk_binding = copy.copy(template)
    mrk_binding['source'] = 'alt'
    mrk_binding['routing_key'] = '#'
    mrk_binding['destination'] = 'missing_routing_key'

    result = [mrk_binding]
    for x_name, topic, q_name in bindings:
        entry = copy.copy(template)
        entry['source'] = x_name
        entry['routing_key'] = topic
        entry['destination'] = q_name
        result.append(entry)

        dead_entry = copy.copy(template)
        dead_entry['source'] = 'dead'
        dead_entry['routing_key'] = topic
        dead_entry['destination'] = 'dead_' + q_name
        result.append(dead_entry)

    return result


if __name__ == '__main__':
    args = parse_arguments()
    main(args.config_filename, args.output_filename)
